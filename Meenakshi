#include <iostream>
#include <stack>
using namespace std;

int main()
{
    int arr[16];
    int k;

    for (int i=0;i<=16;i++)
    {
        cout<<"Enter the Average Data of "<<2000+i<<endl;
        cin>>arr[i];
    }

    stack <int> raindata;

    for (int i=15;i>=0;i--)
    {
        raindata.push(arr[i]);
    }


    for (int i=0;i<15;i++)
    {
        k=raindata.top();
        raindata.pop();
        if (raindata.top()>=k)
        {
            cout<<"for "<<2000+i<<" Next year "<<2000+i+1<<"has high rainfall"<<endl;
        }

    }




return 0;

}


--------------------------------------------------------------------------------------------------------------------------------------
/*   Use inputs like {()}{[]}{},()(){} ie using parenthesis only
eg . ({[]}){({})}[]
     
*/
 

#include <iostream>
#include <stack>
#include <cstdio>
#include <string>
using namespace std;

int main()
{
    char S1[30];
    string S2;
    stack <char> stk;
    cout<<"Enter the expression";
    cin>>S1;


    for (int i=0;i<30;i++)
    {
        if (S1[i]=='{' || S1[i]=='('|| S1[i]=='[')
            {
                stk.push(S1[i]);
                S2=S2+S1[i];
            }
        else
        {
            if (S1[i]=='}' && stk.top()=='{')
            {
                stk.pop();
                int k = S2.length();
                for (int i=0;i<k;i++)
                {
                    if ((char)(S2[i])=='{')
                        {
                            cout<<"the length of subexpression {} "<<(k-i)*2<<endl;
                        }
                    else if ((char)(S2[i])=='(')
                        {
                            cout<<"the length of subexpression () "<<(k-i)*2<<endl;
                        }
                    else if ((char)(S2[i])=='[')
                        {
                            cout<<"the length of subexpression [] "<<(k-i)*2<<endl;
                        }

                }
                S2.clear();
            }
            else if (S1[i]=='}' && stk.top()!='{')
            {
                cout<<"Unbalanced Expression"<<endl;
                break;
            }

            if (S1[i]==')' && stk.top()=='(')
            {
                stk.pop();
                int k = S2.length();
                for (int i=0;i<k;i++)
                {
                    if ((char)(S2[i])=='{')
                        {
                            cout<<"the length of subexpression {} "<<(k-i)*2<<endl;
                        }
                    else if ((char)(S2[i])=='(')
                        {
                            cout<<"the length of subexpression () "<<(k-i)*2<<endl;
                        }
                    else if ((char)(S2[i])=='[')
                        {
                            cout<<"the length of subexpression [] "<<(k-i)*2<<endl;
                        }

                }
                S2.clear();
            }
            else if (S1[i]==')' && stk.top()!='(')
            {
                cout<<"Unbalanced Expression"<<endl;
                break;
            }

            if (S1[i]==']' && stk.top()=='[')
            {
                stk.pop();
                int k = S2.length();
                for (int i=0;i<k;i++)
                {
                    if ((char)(S2[i])=='{')
                        {
                            cout<<"the length of subexpression {} "<<(k-i)*2<<endl;
                        }
                    else if ((char)(S2[i])=='(')
                        {
                            cout<<"the length of subexpression () "<<(k-i)*2<<endl;
                        }
                    else if ((char)(S2[i])=='[')
                        {
                            cout<<"the length of subexpression [] "<<(k-i)*2<<endl;
                        }

                }
                S2.clear();
            }
            else if (S1[i]==']' && stk.top()!='[')
            {
                cout<<"Unbalanced Expression"<<endl;
                break;
            }
        }
    }
    return 0;
    }
    
    ----------------------------------------------------------------------------------------------------------------------------
    
    /*Don't give large numbers for process times.
 like if you give 30, then you would have to wait for 30 seconds to
 complete the task. Use small numbers like 3,5,7 etc;*/

#include<iostream>
#include<Windows.h>
#include <queue>
using namespace std;

struct time {
int sec;
};


int main()
{
   time timer;
   timer.sec=0;
   int n,k;double t,c,s, average;
   cout<<"Enter the queue size ";cin>>n;
   queue <int> runtime;
    c=0;
    s=0;
    while (runtime.size()<n)
    {
        cout<<"Enter the processor job time -";cin>>t;
        runtime.push(t);
        s=s+t;
        c=c+1;
        average=(s/c);
        cout<<"Average time"<<average<<endl;

         if (runtime.size()==n)
    {
        cout<<"Do you have more processes?Y/N";
        char i;cin>>i;
        if (i=='Y' || i=='y')
        {
            k=runtime.front();
            runtime.pop();
            for (int i=0;i<k;i++)
            {
               timer.sec++;
               Sleep(1000);
               cout<<"Completing front process in"<<k-timer.sec<<" secs"<<endl;


            }
        }
        else
        {
            break;
        }
        timer.sec=0;
    }

    }
       return 0;
}

}
--------------------------------------------------------------------------------------------------------------------------------

